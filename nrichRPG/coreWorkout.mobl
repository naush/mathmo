module nrichRPG::coreWorkout

import mobl
import ui
import mobl::ui::stylemixin
import nrichRPG::questionAnswer
import mathJAX
import plot

style helpStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 20px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style deleteStyle {
	//background-color:#8888FF;
	padding:10px;
	padding-right: 2px;
	float: right;
}

style headerLogo {
	padding:0px;
	margin: 4px;
	border: #888888 1px solid;
}

var qCount:Num = 0; //QA.all().count()
var tickCount:Num = 0; //QA.all().filter("done","=",true).count()

function updateCounts():void
{
	qCount = QA.all().count();
	tickCount = QA.all().filter("done","=",true).count();
	log("qCount = " + qCount + " tickCount = " + tickCount);
}

function clearAllQ():void
{
	QA.all().destroyAll();
}

function randomQ(n:Num, topicId:Num):void
{
	foreach(i in range(0,n)) {
		makeQA(topicId);
	}
}

function randomQStar(n:Num):void
{
	foreach(i in range(0,n)) {
		var r:Num = Math.floor(13*Math.random());
		var tid:String = "F" + (1+r);
		if(tid=="F3") tid="F3a";
		makeQAStar(tid);
	}
}

function randomQStats(n:Num):void
{
	foreach(i in range(0,n)) {
		var r:Num = Math.floor(6*Math.random());
		var tid:String = "S" + (1+r);
		makeQAStar(tid);
	}
}

resource icon.png

control addQA() {
	group {

		item(onclick = {addAlgebra();}) {
			label("+Algebraic")
		}
		item(onclick = {addCurveSketch();}) {
			label("+Curve sketching")
		}
		item(onclick = {addGeometry();}) {
			label("+Geometry")
		}
		item(onclick = {addSequencesAndSeries();}) {
			label("+Sequences & series")
		}
		item(onclick = {addVectors();}) {
			label("+Vectors")
		}
		item(onclick = {addDifferentiation();}) {
			label("+Differentiation")
		}
		item(onclick = {addIntegration();}) {
			label("+Integration")
		}
		item(onclick = {addDifferentialEquations();}) {
			label("+Differential equations")
		}
	}
}
 
 
screen addAlgebra() {
	var qa = QA()
	header("Algebraic") {
		backButton()
	}
	group {
		item(onclick = {makeQA(10); alert("Quadratic Q added");}) {
         	label("+Quadratic equations")
        }
		item(onclick = {makeQA(11); alert("Completing the Square Q added");}) {
         	label("+Completing the square")
        }
		item(onclick = {makeQA(7); alert("Ineqalities Q added");}) {
         	label("+Inequalities")
        }
		item(onclick = {makeQA(9); alert("Factor theorem Q added");}) {
         	label("+Factor theorem")
        }
		item(onclick = {makeQA(1); alert("Partial fraction Q added");}) {
         	label("+Partial fractions")
        }
		item(onclick = {makeQA(30); alert("Powers Q added");}) {
         	label("+Powers")
        }
		item(onclick = {makeQA(13);  alert("Logarithm Q added");}) {
         	label("+Logarithms")
        }
		item(onclick = {makeQA(17); alert("Trig equation Q added");}) {
         	label("+Trig equations")
        }
	}
}

screen addCurveSketch() {
	header("Curve Sketching") {
		backButton()
	}
	group {
		item(onclick = {makeQA(24); alert("Modulus Q added");}) {
         	label("+Modulus function")
        }
		item(onclick = {makeQA(25); alert("Transformations of functions Q added");}) {
         	label("+Transformations of functions")
        }
		item(onclick = {makeQA(26); alert("Composition of functions Q added");}) {
         	label("+Composition of functions")
        }
		item(onclick = {makeQA(270); alert("Implicit functions Q added");}) {
         	label("+Implicit functions")
        }
		item(onclick = {makeQA(27); alert("Parametric functions Q added");}) {
         	label("+Parametric functions")
        }
	}
}

screen addGeometry() {
	header("+Geometry") {
		backButton()
	}
	group {
		item(onclick = {makeQA(15); alert("Triangles Q added");}) {
         	label("+Triangles")
        }
		item(onclick = {makeQA(16); alert("Circles Q added");}) {
         	label("+Circles")
        }
		item(onclick = {makeQA(6); alert("3D lines Q added"); }) {
         	label("+ 3D lines")
        }
	}
}

screen addSequencesAndSeries() { 
	header("+Sequences and Series") {
		backButton()
	}
	group {
		item(onclick = {makeQA(8);  alert("Arithmetic Progressions Q added");}) {
         	label("+Arithmetic progressions")
        }
		item(onclick = {makeQA(12); alert("Binomial Expansion Q added"); }) {
         	label("+Binomial expansion")
        }
		item(onclick = {makeQA(23);  alert("Geometric Progression Q added");}) {
         	label("+Geometric progressions")
        }
		item(onclick = {makeQA(2); alert("Binomial theorem Q added"); }) {
         	label("+Binomial theorem")
        }
    }
}

screen addVectors() {
	header("+Vectors") {
		backButton()
	}
	group {
		item(onclick = {makeQA(5);  alert("Scalar product Q added");}) {
         	label("+Scalar products")
        }
		item(onclick = {makeQA(18);  alert("Vector equation of lines Q added");}) {
         	label("+Vector equation of lines")
        }
    }
}

screen addDifferentiation() {
	header("+Differentiation") {
		backButton()
	}
	group {
		item(onclick = {makeQA(14);  alert("Stationary points Q added");}) {
         	label("+Stationary points")
        }
		item(onclick = {makeQA(20);  alert("Chain rule Q added");}) {
         	label("+Chain rule")
        }
		item(onclick = {makeQA(21);  alert("Product rule Q added");}) {
         	label("+Product rule")
        }
		item(onclick = {makeQA(22);  alert("Quotient rule Q added");}) {
         	label("+Quotient rule")
        }
		item(onclick = {makeQA(19);}) {
         	label("+Implicit differentiation")
        }
    }	
}

screen addIntegration() {
	header("+Integration") {
		backButton()
	}
	group {
		item(onclick = {makeQA(28);  alert("Integration Q added");}) {
         	label("+Integration")
        }
		item(onclick = {makeQA(3);  alert("Polynomial integration Q added");}) {
         	label("+Polynomial integration")
        }
		item(onclick = {makeQA(4);  alert("Trig integration Q added");}) {
         	label("+Trig integration")
        }
    }	
}

screen addDifferentialEquations() {
	header("+Diff equations") {
		backButton()
	}
	group {
		item(onclick = {makeQA(29);  alert("Differential equations Q added");}) {
         	label("+Diff equations")
        }
    }	
}

/* Start of Core+ */
control addQAPlus() {
	group {
		item(onclick = {makeQAStar("F1");  alert("Complex arithmetic Q added");}) {
         	label("+Complex arithmetic")
        }
		item(onclick = {makeQAStar("F2");  alert("Modulus argument Q added");}) {
         	label("+Modulus argument")
        }
        /*
		item(onclick = {makeQAStar("F3"); alert("1st order DE Q added");}) {
         	label("+1st order DEs")
        }
        */
		item(onclick = {makeQAStar("F3a");  alert("2nd order DE Q added");}) {
         	label("+2nd order DEs")
        }
		item(onclick = {makeQAStar("F4");  alert("Rank 2 matrices Q added");}) {
         	label("+Rank 2 matrices")
        }
		item(onclick = {makeQAStar("F5");  alert("Taylor Series Q added");}) {
         	label("+Taylor Series")
        }
		item(onclick = {makeQAStar("F6");  alert("Polar Coordinates Q added");}) {
         	label("+Polar Coordinates")
        }
		item(onclick = {makeQAStar("F7");  alert("Rank 3 matrices Q added");}) {
         	label("+Rank 3 matrices")
        }
		item(onclick = {makeQAStar("F8");  alert("Further vectors added");}) {
         	label("+Further vectors")
        }
		item(onclick = {makeQAStar("F9");  alert("Newton-Raphson added");}) {
         	label("+Newton-Raphson")
        }
		item(onclick = {makeQAStar("F10");  alert("Further inequalities Q added");}) {
         	label("+Further inequalities")
        }
		item(onclick = {makeQAStar("F11");  alert("Integration by substitution Q added");}) {
         	label("+Integration by substitution")
        }
		item(onclick = {makeQAStar("F12");  alert("Figures of revolution Q added");}) {
         	label("+Figures of revolution")
        }
		item(onclick = {makeQAStar("F13");  alert("Matrix transformations Q added");}) {
         	label("+Matrix transformations")
        }
	}
}

/* Start of Core+ */
control addQAStats() {
	group {
		item(onclick = {makeQAStats("S1");  alert("Discrete Distributions Q added");}) {
         	label("+Discrete Distributions")
        }
		item(onclick = {makeQAStats("S2");  alert("Continuous Distributions Q added");}) {
         	label("+Continuous Distributions")
        }
		item(onclick = {makeQAStats("S3");  alert("Hypothesis Testing Q added");}) {
         	label("+Hypothesis Testing")
        }
		item(onclick = {makeQAStats("S4");  alert("Confidence Intervals Q added");}) {
         	label("+Confidence Intervals")
        }
		item(onclick = {makeQAStats("S5");  alert("Chi Squared Q added");}) {
         	label("+Chi Squared")
        }
		item(onclick = {makeQAStats("S6");  alert("Product Moment Q added");}) {
         	label("+Product Moments")
        }
	}
}

style questionStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 17px;
	color: #000000;
	padding:10px;
	word-break: normal;
}

style answerStyle {
	background-color:#F0F0F0;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;
	font-size: 17px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style agreeStyle {
	background-color:#F0FFF0;
	border: 2px solid #CCFFCC;
/*	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;*/
	font-size: 17px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style disagreeStyle {
	background-color:#FFF0F0;
	border: 2px solid #FFCCCC;
/*	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;*/
	font-size: 17px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style plotStyle {
	width : 270px;
	height : 270px;
}


style topicLabelStyle {
	padding:20px;
	width:100%;
	height: 100%;
	color:#666;
}


style panelHeaderStyle {
  //backgroundGradientMixin($baseColor, rgb($baseColor.r~40, $baseColor.g~40, $baseColor.b~40));
  padding: 12px;
  height: 2.3em;
  font-size: 1em;
  line-height: 2.3em;
  font-weight: bold;
  text-align: left;
  //text-shadow: #477 0px 1px 1px;
  color: black;
  font-weight: bold;
  margin: 0;
  z-index: 2;
}

style panelHeaderContainerStyle {
  width: 250px;
  position: absolute;
}

style panelHeaderTextStyle {
	width:180px;
	white-space:nowrap;
	text-overflow:ellipsis;
}

style panelHeaderStyle sideButtonStyle {
	z-index: 3;
}

control panelHeader(text : String, onclick : Callback = null) {
  <div class=panelHeaderStyle onclick=onclick>
    <div class=panelHeaderContainerStyle><div databind=text class=panelHeaderTextStyle/></div>
    elements()
  </div>
}


function renderQA(qa:QA):String {
	renderMaths();
	if(qa.done && qa.answer == "%GRAPH%") {
		var jsonData:JSON = JSON.parse(qa.plotData);
		lineChart("corePlotArea", jsonData);
	}
	return "";
}

function removeMathJaxIncidentElements() {
  $("span").remove(".MathJax_Preview");
  $("script").remove("#MathJax-Element-*");
}

control answerBlock(qa:QA, number:Num) {
	block(qa.correct ? agreeStyle : disagreeStyle, onclick={

	  removeMathJaxIncidentElements();

    if (qa.answer != "%GRAPH%") {
      qa.answer = $("#answer-block-" + number).children("span:first").html();
    }
  }) {
    label("A" + number + ". ")
		when(qa.answer != "%GRAPH%") {
			<span id="answer-block-" + number>html(qa.answer)</span>
		}
		else {
			plot("corePlotArea", plotStyle)
		}
	}
	block(answerStyle) {
		<span style="display:none">
			html(renderQA(qa))
		</span>
		label("Did you agree?")
		sideButton("Yes", onclick={qa.correct=true;})
		sideButton("No", onclick={qa.correct=false;})
	}	
}

function nextQA(qa:QA):QA
{
	var n:Num = qa.number;
	var qa2:QA = (QA.all() where number > qa.number).one();
	if(qa2 == null)
		return QA.all().one();
	return qa2;
}



control showQA(qa:QA, number:Num) {
	panelHeader(qa.topic, onclick={renderMaths();}) {
		sideButton("Del", onclick={
			var qa2:QA = nextQA(qa);
			remove(qa);
			qa = qa2;
			renderQA(qa);
		}, style=delStyle, pushedStyle=delPushedStyle)
	}
	group {
		item(questionStyle, onclick={
			  renderMaths();
	      removeMathJaxIncidentElements();
			  qa.question = $("#question-block-" + number).children("span:first").html();
		  }, hideArrow=true) {
			html("Q" + number + ". ")
			<span id="question-block-" + number>html(qa.question)</span>
			<span style="display:none">
				html(renderQA(qa))
			</span>
		}
		item(onclick={renderMaths();}, hideArrow=true) {
			block(answerStyle) {
				checkBox(qa.done, "Check answer", onchange = {
					renderQA(qa);
				})
			}
			when(qa.done) {
				answerBlock(qa, number)
			}
		}
	}
}

external sync function randomCoreQA(topic:String):Array<String>

external sync function makeProblem(qid:Num):Array<String>
external sync function makeFurther(qid:String):Array<String>


var max:Num = 0;


function makeQA(n:Num):void {
	var qa = QA();
	var qas:Collection<QA> = QA.all();
	foreach(item in qas) {
		max = Math.max(max, item.number);
	}
	qa.number = max + 1;
	var q_and_A:Array<String> = makeProblem(n);
	qa.question = q_and_A[0];
	qa.answer = q_and_A[1];
	qa.topic = q_and_A[2];
	if(q_and_A.length > 3) {
		qa.plotData = q_and_A[3];
	}
	qa.done = false;
	add(qa);
}

function makeQAStar(s:String):void {
	var qa = QA();
	var qas:Collection<QA> = QA.all();
	foreach(item in qas) {
		max = Math.max(max, item.number);
	}
	qa.number = max + 1;
	var q_and_A:Array<String> = makeFurther(s);
	qa.question = q_and_A[0];
	qa.answer = q_and_A[1];
	qa.topic = q_and_A[2];
	if(q_and_A.length > 3) {
		qa.plotData = q_and_A[3];
	}
	qa.done = false;
	add(qa);
}

function makeQAStats(s:String):void {
	var qa = QA();
	var qas:Collection<QA> = QA.all();
	foreach(item in qas) {
		max = Math.max(max, item.number);
	}
	qa.number = max + 1;
	var q_and_A:Array<String> = makeFurther(s);
	qa.question = q_and_A[0];
	qa.answer = q_and_A[1];
	qa.topic = q_and_A[2];
	if(q_and_A.length > 3) {
		qa.plotData = q_and_A[3];
	}
	qa.done = false;
	add(qa);
}

<javascript>
	__ns.makeProblem = function(n) {
	    if(n === 1000)
	    {
	        n=1+Math.floor(Math.random()*29);
			n=n;
	    }
	
		if(n === 100)
		    {
		        n=pickrand(10, 11, 7, 9, 1, 30, 13, 17);
		    }
		
		if(n === 200)
		    {
		        n=pickrand(24, 25, 26, 27, 270);
		    }
		
		if(n === 300)
		    {
		        n=pickrand(15,16,6);
		    }
		if(n === 400)
		    {
		        n=pickrand(8, 12, 23, 2);
		    }
		if(n === 500)
		    {
		        n=pickrand(5, 18);
		    }
		if(n === 600)
		    {
		        n=pickrand(14,20,21,22,19);
		    }
		if(n === 700)
		    {
		        n=pickrand(28,3,4);
		    }
		
	    switch (n)
	    {
	        case 1:
	            var qa=makePartial();
	   			qa.push("Partial fractions");
	        break;
	        
	        case 2:
	            var qa=makeBinomial2();
	   			qa.push("Binomial theorem");
	        break;
	        
	        case 3:
	            var qa=makePolyInt();
	   			qa.push("Polynomial integration");
	        break;
	        
	        case 4:
	            var qa=makeTrigInt();
	   			qa.push("Trig integration");
	        break;
	        
	        case 5:
	            var qa=makeVector();
	   			qa.push("Scalar products");
	        break;
	        
	        case 6:
	            var qa=makeLines();
	   			qa.push("3D Lines");
	        break;
	        
	        case 7:
	            var qa=makeIneq();
	   			qa.push("Inequalities");
	        break;
	        
	        case 8:
	            var qa=makeAP();
	   			qa.push("Arithmetic progressions");
	        break;
	        
	        case 9:
	            var qa=makeFactor();
	   			qa.push("Factor theorem");
	        break;
	        
	        case 10:
	            var qa=makeQuadratic();
	   			qa.push("Quadratics");
	        break;
	        
	        case 11:
	            var qa=makeComplete();
	   			qa.push("Completing the square");
	        break;
	        
	        case 12:
	            var qa=makeBinExp();
	   			qa.push("Binomial expansion");
	        break;
	        
	        case 13:
	            var qa=makeLog();
	   			qa.push("Logarithms");
	        break;
	        
	        case 14:
	            var qa=makeStationary();
	   			qa.push("Stationary points");
	        break;
	        
	        case 15:
	            var qa=makeTriangle();
	   			qa.push("Triangles");
	        break;
	        
	        case 16:
	            var qa=makeCircle();
	   			qa.push("Circles");
	        break;
	        
	        case 17:
	            var qa=makeSolvingTrig();
	   			qa.push("Trig equations");
	        break;
	        
	        case 18:
	            var qa=makeVectorEq();
	   			qa.push("Vector equations");
	        break;
	        
	        case 19:
	            var qa=makeImplicit();
	   			qa.push("Implicit differentiation");
	        break;
	        
	        case 20:
	            var qa=makeChainRule();
	   			qa.push("The chain rule");
	        break;
	        
	        case 21:
	            var qa=makeProductRule();
	   			qa.push("The product rule");
	        break;
	        
	        case 22:
	            var qa=makeQuotientRule();
	   			qa.push("The quotient rule");
	        break;
	        
	        case 23:
	            var qa=makeGP();
	   			qa.push("Geometric progressions");
	        break;
	        
	        case 24:
	            var qa=makeModulus();
	   			qa.push("Modulus function");
	        break;
	        
	        case 25:
	            var qa=makeTransformation();
	   			qa.push("Transformations of functions");
	        break;
	        
	        case 26:
	            var qa=makeComposition();
	   			qa.push("Composition of functions");
	        break;
	        
	        case 27:
	            var qa=makeParametric();
	   			qa.push("Parametric functions");
	        break;
	
	        case 270:
	            var qa=makeImplicitFunction();
	   			qa.push("Implicit functions");
	        break;
	        
	        case 28:
	            var qa=makeIntegration();
	   			qa.push("Integration");
	        break;
	        
	        case 29:
	            var qa=makeDE();
	   			qa.push("Differential equations");
	        break;
	        
	        case 30:
	            var qa=makePowers();
	   			qa.push("Powers");
	        break;
	        default:
	            alert("invalid qid" + n);
	        break;
	    }
	    return qa;
	};
	
	__ns.makeFurther = function(n) {
	    switch (n)
	    {
	        case 'F1':
				var qa=makeCArithmetic();
				qa.push("Complex Arithmetic");
			break;
		
			case 'F2':
				var qa=makeCPolar();
				qa.push("Modulus Argument");
			break;
			
			/*
			case 'F3':
				var qa=makeDESepHard();
				qa.push("1st order DEs");
			break;
			*/
			
			case 'F3a':
				var qa=makeDETwoHard();
				qa.push("2nd order DEs");
			break;
			
			case 'F4':
				var qa=makeMatrix2();
				qa.push("Rank 2 matrices");
			break;
			
			case 'F5':
				var qa=makeTaylor();
				qa.push("Taylor Series");
			break;
			
			case 'F6':
				var qa=makePolarSketch();
				qa.push("Polar Coordinates");
			break;
			
			case 'F7':
				var qa=makeMatrix3();
				qa.push("Rank 3 matrices");
			break;
			
			case 'F8':
				var qa=makeFurtherVector();
				qa.push("Further vectors");
			break;
			
			case 'F9':
				var qa=makeNewtonRaphson();
				qa.push("Newton-Raphson");
			break;
			
			case 'F10':
				var qa=makeFurtherIneq();
				qa.push("Further inequalities");
			break;
			
			case 'F11':
				var qa=makeSubstInt();
				qa.push("Integration by substitution");
			break;
			
			case 'F12':
				var qa=makeRevolution();
				qa.push("Figures of revolution");
			break;
			
			case 'F13':
				var qa=makeMatXforms();
				qa.push("Matrix transformations");
			break;
	
			case 'S1':
				var qa=makeDiscreteDistn();
				qa.push("Discrete Distributions");
			break;
			
			case 'S2':
				var qa=makeContinDistn();
				qa.push("Continuous Distributions");
			break;
			
			case 'S3':
				var qa=makeHypTest();
				qa.push("Hypothesis Testing");
			break;
			
			case 'S4':
				var qa=makeConfidInt();
				qa.push("Confidence Intervals");
			break;
			
			case 'S5':
				var qa=makeChiSquare();
				qa.push("Chi Squared");
			break;
			
			case 'S6':
				var qa=makeProductMoment();
				qa.push("Product Moments");
			break;


	        default:
	            alert("invalid qid" + n);
	        break;
	    }
	    return qa;
	};

	
</javascript>
