module nrichRPG::coreWorkout

import mobl
import ui
import mobl::ui::stylemixin
import nrichRPG::questionAnswer
import mathJAX
import plot

style helpStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 20px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style deleteStyle {
	//background-color:#8888FF;
	padding:10px;
	padding-right: 2px;
	float: right;
}

style headerLogo {
	padding:0px;
	margin: 4px;
	border: #888888 1px solid;
}

var qCount:Num = 0; //QA.all().count()
var tickCount:Num = 0; //QA.all().filter("done","=",true).count()

function updateCounts():void
{
	qCount = QA.all().count();
	tickCount = QA.all().filter("done","=",true).count();
	log("qCount = " + qCount + " tickCount = " + tickCount);
}

function clearAllQ():void
{
	QA.all().destroyAll();
}


function randomQ(n:Num, topicCode:String):void
{
	var keys:[String] = topicMapForId(topicCode).keys();
	foreach(i in range(0,n)) {
		var r:Num = random(keys.length - 1);
		var tid:String = keys[r]; 
		makeQA(tid);
	}
}


resource icon.png

control addQA() {
	group {

		item(onclick = {addAlgebra();}) {
			label("+Algebraic")
		}
		item(onclick = {addCurveSketch();}) {
			label("+Curve sketching")
		}
		item(onclick = {addGeometry();}) {
			label("+Geometry")
		}
		item(onclick = {addSequencesAndSeries();}) {
			label("+Sequences & series")
		}
		item(onclick = {addVectors();}) {
			label("+Vectors")
		}
		item(onclick = {addDifferentiation();}) {
			label("+Differentiation")
		}
		item(onclick = {addIntegration();}) {
			label("+Integration")
		}
		item(onclick = {addDifferentialEquations();}) {
			label("+Differential equations")
		}
	}
}

function topicMapForId(tid:String):Map<String,String> {
	var map:Map<String,String> = Map<String,String>();
	if(tid.indexOf("C") == 0)
		initCoreTopicMap(map);
	else if(tid.indexOf("F") == 0)
		initFurtherTopicMap(map);
	else if(tid.indexOf("S") == 0)
		initStatsTopicMap(map);
	else
		alert("invalid topi id "+tid);
	return map;
}

function topicName(tid:String):String {
	return topicMapForId(tid).get(tid);
}

function topicAdded(tid:String):void {
	makeQA(tid);
	alert(topicName(tid) + " added");
}

control topicLabel(tid:String) {
	var map:Map<String,String> = topicMapForId(tid)
	label("+" + map.get(tid))
}

control topicItem(tid:String) {
	item(onclick = {topicAdded(tid);}) {
     	topicLabel(tid)
    }
}

screen addAlgebra() {
	var qa = QA()
	header("Algebraic") {
		backButton()
	}
	group {
		topicItem("C11")
		topicItem("C7")
		topicItem("C9")
		topicItem("C1")
		topicItem("C30")
		topicItem("C13")
		topicItem("C17")
	}
}

screen addCurveSketch() {
	header("Curve Sketching") {
		backButton()
	}
	group {
		topicItem("C24")
		topicItem("C25")
		topicItem("C26")
		topicItem("C270")
		topicItem("C27")
	}
}

screen addGeometry() {
	header("+Geometry") {
		backButton()
	}
	group {
		topicItem("C15")
		topicItem("C16")
		topicItem("C6")
	}
}

screen addSequencesAndSeries() { 
	header("+Sequences and Series") {
		backButton()
	}
	group {
		topicItem("C8")
		topicItem("C12")
		topicItem("C23")
		topicItem("C2")
    }
}

screen addVectors() {
	header("+Vectors") {
		backButton()
	}
	group {
		topicItem("C5")
		topicItem("C18")
    }
}

screen addDifferentiation() {
	header("+Differentiation") {
		backButton()
	}
	group {
		topicItem("C14")
		topicItem("C20")
		topicItem("C21")
		topicItem("C22")
		topicItem("C19")
    }
}

screen addIntegration() {
	header("+Integration") {
		backButton()
	}
	group {
		topicItem("C28")
		topicItem("C3")
		topicItem("C4")
    }
}

screen addDifferentialEquations() {
	header("+Diff equations") {
		backButton()
	}
	group {
		topicItem("C29")
    }	
}

/* Start of Core+ */
control addQAPlus() {
	group {
		topicItem("F1")
		topicItem("F2")
		//topicItem("F3")
		topicItem("F3a")
		topicItem("F4")
		topicItem("F5")
		topicItem("F6")
		topicItem("F7")
		topicItem("F8")
		topicItem("F9")
		topicItem("F10")
		topicItem("F11")
		topicItem("F12")
		topicItem("F13")
	}
}

/* Start of Core+ */
control addQAStats() {
	group {
		topicItem("S1")
		topicItem("S2")
		topicItem("S3")
		topicItem("S4")
		topicItem("S5")
		topicItem("S6")
	}
}

style questionStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 17px;
	color: #000000;
	padding:10px;
	word-break: normal;
}

style answerStyle {
	background-color:#F0F0F0;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;
	font-size: 17px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style agreeStyle {
	background-color:#F0FFF0;
	border: 2px solid #CCFFCC;
/*	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;*/
	font-size: 17px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style disagreeStyle {
	background-color:#FFF0F0;
	border: 2px solid #FFCCCC;
/*	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;*/
	font-size: 17px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style plotStyle {
	width : 270px;
	height : 270px;
}


style topicLabelStyle {
	padding:20px;
	width:100%;
	height: 100%;
	color:#666;
}


style panelHeaderStyle {
  //backgroundGradientMixin($baseColor, rgb($baseColor.r~40, $baseColor.g~40, $baseColor.b~40));
  padding: 12px;
  height: 2.3em;
  font-size: 1em;
  line-height: 2.3em;
  font-weight: bold;
  text-align: left;
  //text-shadow: #477 0px 1px 1px;
  color: black;
  font-weight: bold;
  margin: 0;
  z-index: 2;
}

style panelHeaderContainerStyle {
  width: 200px;
  position: absolute;
}

style panelHeaderTextStyle {
	width:160px;
	white-space:nowrap;
	text-overflow:ellipsis;
}

style panelHeaderStyle sideButtonStyle {
	z-index: 3;
}

control panelHeader(text : String, onclick : Callback = null) {
  <div class=panelHeaderStyle onclick=onclick>
    <div class=panelHeaderContainerStyle><div databind=text class=panelHeaderTextStyle/></div>
    elements()
  </div>
}

function renderQA(qa:QA) {
	renderMaths();
	renderPlot("corePlotArea", qa);
}

function removeMathJaxIncidentElements() {
  $("span").remove(".MathJax_Preview");
  $("[id^='MathJax-Element-']").each(function() { $(this).remove(); });
}

// control answerBlock(qa:QA, number:Num) {
// 	block(qa.correct ? agreeStyle : disagreeStyle, onclick={
// 
// 	  removeMathJaxIncidentElements();
// 
//     if (qa.answer != "%GRAPH%") {
//       qa.answerHtml = $("#answer-block-" + number).children("span:first").html();
//     } else {
//     	qa.plotHtml = $("#plot-wrapper").children("span:first").html();
//     }
//   }) {
//     label("A" + number + ". ")
// 		when(qa.answer != "%GRAPH%") {
//       <span id="answer-block-" + number>html(blank(qa.answerHtml) ? qa.answer : qa.answerHtml)</span>
// 		}
// 		else {
// 			plot(qa, "corePlotArea", plotStyle)
// 		}
// 	}
// 	block(answerStyle) {
// 		label("Did you agree?")
// 		sideButton("Yes", onclick={qa.correct=true;})
// 		sideButton("No", onclick={qa.correct=false;})
// 	}	
// }

function nextQA(qa:QA):QA
{
	var n:Num = qa.number;
	var qa2:QA = (QA.all() where number > qa.number).one();
//	if(qa2 == null)
//		return QA.all().one();
	return qa2;
}

control showQA(qa:QA, number:Num) {
	panelHeader(topicName(qa.topic), onclick={renderMaths();}) {
		sideButton("Del", onclick={
			var qa2:QA = nextQA(qa);
     		 remove(qa);
			if (qa2 == null) {
			  hideCurrent();
			} else {
      	qa = qa2;
      	renderQA(qa);
	    }
/*
			var qa2:QA = nextQA(qa);
			remove(qa);
			qa = qa2;
			renderQA(qa);
*/
		}, style=delStyle, pushedStyle=delPushedStyle)
		
		sideButton("New", onclick={
			var qa2:QA = makeQA(qa.topic);
			var qnum:Num = qa.number;
			remove(qa);
			qa = qa2;
			qa.number = qnum;
			renderQA(qa);	
		},
		style=delStyle, pushedStyle=delPushedStyle)
	}
	group {
		item(questionStyle, onclick={
			  renderMaths();
	      removeMathJaxIncidentElements();
			  qa.questionHtml = $("#question-block-" + number).children("span:first").html();
		  }, hideArrow=true) {
			html("Q" + number + ". ")
			<span id="question-block-" + number>html(blank(qa.questionHtml) ? qa.question : qa.questionHtml)</span>
		}
		item(hideArrow=true) {
		  makeChoices(qa, number)
		}
		// item(onclick={renderMaths();}, hideArrow=true) {
		// 	block(answerStyle) {
		// 		checkBox(qa.done, "Check answer", onchange = {
		// 			renderQA(qa);
		// 		})
		// 	}
		// 	when(qa.done) {
		// 		answerBlock(qa, number)
		// 	}
		// }
	}
}

function choiceItemStyle(choiceNumber : Num, questionNumber : Num, currentChoice : Num, correctChoice : Num) : Style {
  var encodedChoiceNumber = choiceNumber + questionNumber * 4;
  var encodedCorrectChoice = correctChoice + questionNumber * 4;
  return encodedChoiceNumber == currentChoice ? (currentChoice == encodedCorrectChoice ? agreeStyle : disagreeStyle) : itemStyle;
}

control makeChoices(qa : QA, number : Num) {
  var currentChoice : Num = -1
  block() {
    list((order, correctChoice, answer) in generateChoices(qa)) {
      item(style = choiceItemStyle(order, number, currentChoice, correctChoice), hideArrow=true, onclick={
      	currentChoice = order + number * 4;
      	if (currentChoice == correctChoice + number * 4) {
      	  qa.done = true;
      	  qa.correct = true;
      	} else {
      	  qa.correct = false;
      	}
      }, pushedStyle=itemPushedStyle) {
        html("Choice " + order + ".")
        html(answer)
      }
    }
  }
}

function generateChoices(qa : QA) : Array<(Num, Num, String)> {
	var correctChoice = random(3) + 1;
  var choices : Array<(Num, Num, String)> = [];
  foreach (index in range(1, 5)) {
  	if (index == correctChoice) {
      choices.push((index, correctChoice, qa.answer));
  	} else {
  	  var problem : Array<String> = makeProblem(qa.topic);
      var answer = problem[1];
		  if (problem.length > 2) {
		    answer = problem[2];
		  }
      choices.push((index, correctChoice, answer));
  	}
  }
  return choices;
}

external sync function makeProblem(tid:String):Array<String>
external sync function initMapFromObject(map:Map<String,String>, obj:Object):void
external sync function initCoreTopicMap(map:Map<String,String>):void
external sync function initFurtherTopicMap(map:Map<String,String>):void
external sync function initStatsTopicMap(map:Map<String,String>):void

var max : Num = 0;

function makeQA(tid : String) : QA {
	// var topicMap:Map<String,String> = topicMapForId(tid);
	var qa = QA();
  var qas : Collection<QA> = QA.all() order by number desc limit 1;
  if (qas.count() > 0)
    max = qas.one().number;
	qa.number = max + 1;
	var q_and_A : Array<String> = makeProblem(tid);
	qa.question = q_and_A[0];
	qa.answer = q_and_A[1];
	qa.topic = tid;  //q_and_A[2];
	if(q_and_A.length > 2) {
		qa.plotData = q_and_A[2];
	}
	qa.done = false;
	add(qa);
	return qa;
}

<javascript>

	__ns.coreTopicNames = {
		"C1":"Partial fractions",
		"C2":"Binomial theorem",
		"C3":"Polynomial integration",
		"C4":"Trig integration",
		"C5":"Scalar products",
		"C6":"3D Lines",
		"C7":"Inequalities",
		"C8":"Arithmetic progressions",
		"C9":"Factor theorem",
		"C10":"Quadratics",
		"C11":"Completing the square",
		"C12":"Binomial expansion",
		"C13":"Logarithms",
		"C14":"Stationary points",
		"C15":"Triangles",
		"C16":"Circles",
		"C17":"Trig equations",
		"C18":"Vector equations",
		"C19":"Implicit differentiation",
		"C20":"The chain rule",
		"C21":"The product rule",
		"C22":"The quotient rule",
		"C23":"Geometric progressions",
		"C24":"Modulus function",
		"C25":"Transforms of functions",
		"C26":"Composition of functions",
		"C27":"Parametric functions",
		"C270":"Implicit functions",
		"C28":"Integration",
		"C29":"Differential equations",
		"C30":"Powers"
	};

	__ns.furtherTopicNames = {
	    "F1":"Complex Arithmetic",
	    "F2":"Modulus Argument",
//	    "F3":"1st order DEs",
	    "F3a":"2nd order DEs",
	    "F4":"Rank 2 matrices",
	    "F5":"Taylor Series",
	    "F6":"Polar Coordinates",
	    "F7":"Rank 3 matrices",
	    "F8":"Further vectors",
	    "F9":"Newton-Raphson",
	    "F10":"Further inequalities",
	    "F11":"Integration by substitution",
	    "F12":"Figures of revolution",
	    "F13":"Matrix transformations"
	};
	
	__ns.statsTopicNames = {
		'S1':"Discrete Distributions",
		'S2':"Continuous Distributions",
		'S3':"Hypothesis Testing",
		'S4':"Confidence Intervals",
		'S5':"Chi Squared",
		'S6':"Product Moments"
	};
	
	__ns.initCoreTopicMap = function(map) {
		map.data = __ns.coreTopicNames;
	};

	__ns.initFurtherTopicMap = function(map) {
		map.data = __ns.furtherTopicNames;
	};

	__ns.initStatsTopicMap = function(map) {
		map.data = __ns.statsTopicNames;
	};

	__ns.makers = {
		"C1":makePartial,
		"C2":makeBinomial2,
		"C3":makePolyInt,
		"C4":makeTrigInt,
		"C5":makeVector,
		"C6":makeLines,
		"C7":makeIneq,
		"C8":makeAP,
		"C9":makeFactor,
		"C10":makeQuadratic,
		"C11":makeComplete,
		"C12":makeBinExp,
		"C13":makeLog,
		"C14":makeStationary,
		"C15":makeTriangle,
		"C16":makeCircle,
		"C17":makeSolvingTrig,
		"C18":makeVectorEq,
		"C19":makeImplicit,
		"C20":makeChainRule,
		"C21":makeProductRule,
		"C22":makeQuotientRule,
		"C23":makeGP,
		"C24":makeModulus,
		"C25":makeTransformation,
		"C26":makeComposition,
		"C27":makeParametric,
		"C270":makeImplicitFunction,
		"C28":makeIntegration,
		"C29":makeDE,
		"C30":makePowers,
		
		"F1":makeCArithmetic,
	    "F2":makeCPolar,
//	    "F3":makeDESepHard,
	    "F3a":makeDETwoHard,
	    "F4":makeMatrix2,
	    "F5":makeTaylor,
	    "F6":makePolarSketch,
	    "F7":makeMatrix3,
	    "F8":makeFurtherVector,
	    "F9":makeNewtonRaphson,
	    "F10":makeFurtherIneq,
	    "F11":makeSubstInt,
	    "F12":makeRevolution,
	    "F13":makeMatXforms,

		'S1':makeDiscreteDistn,
		'S2':makeContinDistn,
		'S3':makeHypTest,
		'S4':makeConfidInt,
		'S5':makeChiSquare,
		'S6':makeProductMoment
	};

	__ns.makeProblem = function(tid) {
		return __ns.makers[tid]();
	};
	
/*
	__ns.makeProblem = function(tid) {

	    switch (tid)
	    {
	        case "C1":
	            var qa=makePartial();
//	   			qa.push("Partial fractions");
	        break;
	        
	        case "C2":
	            var qa=makeBinomial2();
//	   			qa.push("Binomial theorem");
	        break;
	        
	        case "C3":
	            var qa=makePolyInt();
//	   			qa.push("Polynomial integration");
	        break;
	        
	        case "C4":
	            var qa=makeTrigInt();
//	   			qa.push("Trig integration");
	        break;
	        
	        case "C5":
	            var qa=makeVector();
//	   			qa.push("Scalar products");
	        break;
	        
	        case "C6":
	            var qa=makeLines();
//	   			qa.push("3D Lines");
	        break;
	        
	        case "C7":
	            var qa=makeIneq();
//	   			qa.push("Inequalities");
	        break;
	        
	        case "C8":
	            var qa=makeAP();
//	   			qa.push("Arithmetic progressions");
	        break;
	        
	        case "C9":
	            var qa=makeFactor();
//	   			qa.push("Factor theorem");
	        break;
	        
	        case "C10":
	            var qa=makeQuadratic();
//	   			qa.push("Quadratics");
	        break;
	        
	        case "C11":
	            var qa=makeComplete();
//	   			qa.push("Completing the square");
	        break;
	        
	        case "C12":
	            var qa=makeBinExp();
//	   			qa.push("Binomial expansion");
	        break;
	        
	        case "C13":
	            var qa=makeLog();
//	   			qa.push("Logarithms");
	        break;
	        
	        case "C14":
	            var qa=makeStationary();
//	   			qa.push("Stationary points");
	        break;
	        
	        case "C15":
	            var qa=makeTriangle();
//	   			qa.push("Triangles");
	        break;
	        
	        case "C16":
	            var qa=makeCircle();
//	   			qa.push("Circles");
	        break;
	        
	        case "C17":
	            var qa=makeSolvingTrig();
//	   			qa.push("Trig equations");
	        break;
	        
	        case "C18":
	            var qa=makeVectorEq();
//	   			qa.push("Vector equations");
	        break;
	        
	        case "C19":
	            var qa=makeImplicit();
//	   			qa.push("Implicit differentiation");
	        break;
	        
	        case "C20":
	            var qa=makeChainRule();
//	   			qa.push("The chain rule");
	        break;
	        
	        case "C21":
	            var qa=makeProductRule();
//	   			qa.push("The product rule");
	        break;
	        
	        case "C22":
	            var qa=makeQuotientRule();
//	   			qa.push("The quotient rule");
	        break;
	        
	        case "C23":
	            var qa=makeGP();
//	   			qa.push("Geometric progressions");
	        break;
	        
	        case "C24":
	            var qa=makeModulus();
//	   			qa.push("Modulus function");
	        break;
	        
	        case "C25":
	            var qa=makeTransformation();
//	   			qa.push("Transformations of functions");
	        break;
	        
	        case "C26":
	            var qa=makeComposition();
//	   			qa.push("Composition of functions");
	        break;
	        
	        case "C27":
	            var qa=makeParametric();
//	   			qa.push("Parametric functions");
	        break;
	
	        case "C270":
	            var qa=makeImplicitFunction();
//	   			qa.push("Implicit functions");
	        break;
	        
	        case "C28":
	            var qa=makeIntegration();
//	   			qa.push("Integration");
	        break;
	        
	        case "C29":
	            var qa=makeDE();
//	   			qa.push("Differential equations");
	        break;
	        
	        case "C30":
	            var qa=makePowers();
//	   			qa.push("Powers");
	        break;
	        
	        case 'F1':
				var qa=makeCArithmetic();
//				qa.push("Complex Arithmetic");
			break;
		
			case 'F2':
				var qa=makeCPolar();
//				qa.push("Modulus Argument");
			break;
			
//			
//			case 'F3':
//				var qa=makeDESepHard();
//				qa.push("1st order DEs");
//			break;
//			
			
			case 'F3a':
				var qa=makeDETwoHard();
//				qa.push("2nd order DEs");
			break;
			
			case 'F4':
				var qa=makeMatrix2();
//				qa.push("Rank 2 matrices");
			break;
			
			case 'F5':
				var qa=makeTaylor();
//				qa.push("Taylor Series");
			break;
			
			case 'F6':
				var qa=makePolarSketch();
//				qa.push("Polar Coordinates");
			break;
			
			case 'F7':
				var qa=makeMatrix3();
//				qa.push("Rank 3 matrices");
			break;
			
			case 'F8':
				var qa=makeFurtherVector();
//				qa.push("Further vectors");
			break;
			
			case 'F9':
				var qa=makeNewtonRaphson();
//				qa.push("Newton-Raphson");
			break;
			
			case 'F10':
				var qa=makeFurtherIneq();
//				qa.push("Further inequalities");
			break;
			
			case 'F11':
				var qa=makeSubstInt();
//				qa.push("Integration by substitution");
			break;
			
			case 'F12':
				var qa=makeRevolution();
//				qa.push("Figures of revolution");
			break;
			
			case 'F13':
				var qa=makeMatXforms();
//				qa.push("Matrix transformations");
			break;
	
			case 'S1':
				var qa=makeDiscreteDistn();
//				qa.push("Discrete Distributions");
			break;
			
			case 'S2':
				var qa=makeContinDistn();
//				qa.push("Continuous Distributions");
			break;
			
			case 'S3':
				var qa=makeHypTest();
//				qa.push("Hypothesis Testing");
			break;
			
			case 'S4':
				var qa=makeConfidInt();
//				qa.push("Confidence Intervals");
			break;
			
			case 'S5':
				var qa=makeChiSquare();
//				qa.push("Chi Squared");
			break;
			
			case 'S6':
				var qa=makeProductMoment();
//				qa.push("Product Moments");
			break;


	        default:
	            alert("invalid qid" + n);
	        break;
	    }
	    return qa;
	};
*/
	
</javascript>
